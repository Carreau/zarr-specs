Zarr core protocol version 3.0
==============================


Conceptual model
----------------

A Zarr *hierarchy* is a tree structure, where each node in the tree is
either a *group* or an *array*. Group nodes may have children
but array nodes may not.

Each node in a hierarchy has a *name* which is a string of ASCII
characters with some additional constraints. Two sibling nodes cannot 
have the same name. The root node does not have a name.

Each node in a hierarchy has a *path* which uniquely identifies that
node and defines its location within the hierarchy. The path is formed 
by joining together the "/" character, followed by the names of all 
ancestor nodes separated by the "/" character, followed by the name of 
the node itself. For example, the path "/foo/bar" identifies a node 
named "bar", whose parent is named "foo", whose parent is the root of 
the hierarchy. The string "/" identifies the root node.

An array has a fixed number of zero or more *dimensions*. Each dimension has an
integer length. The core protocol only considers the case where the
lengths of all dimensions are finite. However, protocol extensions may
be defined which allow a dimension to have infinite or variable
length.

The *shape* of an array is the tuple of dimension lengths. For
example, if an array has 2 dimensions, where the length of the first
dimension is 100 and the length of the second dimension is 20, then
the shape of the array is (100, 20).

An array contains zero or more *elements*. Each element can be
identified by a tuple of coordinates, one for each dimension of the
array. If all dimensions of an array have finite length, then the
number of elements in the array is given by the product of the
dimension lengths. An array element may be empty, or it may have a
value.

An array is associated with a *data type*. A data type defines the set
of possible values that the array may contain, and a binary
representation (i.e., sequence of bytes) for each possible value. For
example, the little-endian 32-bit signed integer data type defines
binary representations for all integers in the range âˆ’2,147,483,648 to
2,147,483,647. The core protocol only considers a limited set of data
types, but protocol extensions may define other data types.

An array is divided into a set of *chunks*, where each chunk is a
hyperrectangle defined by a tuple of intervals, one for each dimension
of the array. The shape of a chunk is the tuple of interval lengths,
and the size of a chunk (i.e., number of elements contained within the
chunk) is the product of its interval lengths.

The chunks of an array are organised into a *grid*. The core protocol
only considers the case where all chunks have the same shape and the
chunks form a regular grid. However, protocol extensions may define
other grid types such as rectilinear grids.

An array is associated with a *memory layout* which defines how to
construct a binary representation of a single chunk by organising the
binary values within the chunk into a single contiguous sequence of
bytes. The core protocol defines two types of memory layout based on
"C" (row-major) and "F" (column-major) ordering of values, but
protocol extensions may define other memory layouts.

An array is associated with an *encoding pipeline*, which is a
sequence of zero or more *codecs* that transforms the binary
representation of a chunk in some way. For example, an encoding
pipeline might include a checksum codec to ensure data integrity, and
a compression codec to reduce data size. All codecs implement a common
*codec interface* which provides a pair of operations, one to perform
the transformation (encode), the other to reverse the transformation
(decode).

Each node in a hierarchy is represented by a *metadata document*,
which is a machine-readable document containing essential processing
information about the node. For example, an array metadata document
will specify the number of dimensions, length of each dimension, data
type, chunk shape, memory layout and encoding pipeline for that array.

Each node in a hierarchy may have an *attributes document*, which is a
machine-readable document containing information that may be useful to
users of the data but is not essential to the basic processing of the
node.

The metadata, attributes and encoded chunk data for all nodes in a
hierarchy are held in a *store*. To enable a variety of different
store types to be used, the core protocol defines a simple *store
interface* which is a common set of operations that a store must
provide.


Node names
----------

TODO define constraints on node names


Data types
----------

TODO define core data types

Regular chunk grids
-------------------

TODO define regular chunk grids, including how to form a key for each chunk in a grid


Memory layouts
--------------

TODO define "C" and "F" memory layouts

Codec interface
---------------

TODO define the codec interface


Array metadata
--------------

An array metadata document is a JSON document containing configuration
metadata for an array. The document must contain a single object, here
called the array metadata object. The array metadata object must
contain the following keys:

`zarr_format` (required)

    URI of the Zarr core protocol specification that defines the
    metadata format. For arrays written by software conforming to this
    specification, the value must be the string
    "http://purl.org/zarr/spec/protocol/core/3.0".

    Implementations of this protocol may assume that the final path
    segment of this URI ("3.0") represents the core protocol version
    number, where "3" is the major version number and "0" is the minor
    version number. Implementations of this protocol may also assume
    that future versions of this protocol that retain the same major
    versioning number ("3") will be backwards-compatible, in the sense
    that any new features added to the protocol can be safely
    ignored. In other words, implementations of this protocol may read
    any array metadata object where the major version number is "3"
    and interpret the metadata as defined in this specification,
    ignoring any metadata keys not defined here.

    Note that this value is given as a URI rather than just as a
    simple version number string to help with discovery of this
    specification.

`shape` (required)

    An array of integers providing the length of each dimension of the
    array. For example, a value ``[10, 20]`` indicates a
    two-dimensional array, where the first dimension has length 10 and
    the second dimension has length 20.

`data_type` (required)

    The data type of the array. If the data type is defined in this
    specification, then the value must be the data type identifier
    provided as a string. For example, ``"<f8"`` for little-endian
    64-bit floating point number.

    The `data_type` key is an extension point, and the value may be
    defined by a protocol extension. If the data type is defined by a
    protocol extension, then the value must be an object with the keys
    `extension_spec`, `type` and `fallback`. The `extension_spec` key
    is required and its value must be a URI that identifies the
    protocol extension and dereferences to a human-readable
    representation of the specification.  The `type` key is required
    and its value is defined by the protocol extension. The `fallback`
    key is optional and, if provided, its value must be one of the
    data type identifiers defined in this specification. If an
    implementation does not recognise the extension, but the
    `fallback` key is present, then the implementation may proceed
    using the value of the `fallback` key as the data type. The object
    may also contain other keys as defined by the protocol extension.

`chunk_grid` (required)

    The chunk grid of the array. If the chunk grid is a regular chunk
    grid as defined in this specification, then the value must be an
    object with the keys `type` and `chunk_shape`. The value of the
    `type` key must be the string ``"regular"``, and the value of the
    `chunk_shape` key must be an array of integers providing the
    lengths of the chunk along each dimension of the array. For
    example, ``{"type": "regular", "chunk_shape": [2, 5]}`` for a
    regular grid where the chunks have length 2 along the first
    dimension and length 5 along the second dimension.

    The `chunk_grid` key is an extension point, and the value may
    defined by a protocol extension. If the chunk grid type is defined
    by a protocol extension, then the value must be an object with the
    keys `extension_spec` and `type`. The `extension_spec` key is
    required and the value must be a URI that identifies the protocol
    extension and dereferences to a human-readable representation of
    the specification.  The `type` key is required and the value is
    defined by the protocol extension. The object may also contain
    other keys as defined by the protocol extension.

`chunk_memory_layout` (required)

    The internal memory layout of the chunks. Use the value ``"C"`` to
    indicate C contiguous memory layout or ``"F"`` to indicate F
    contiguous memory layout as defined in this specification @@TODO
    link to sections.

    The `chunk_memory_layout` key is an extension point, and the value
    may defined by a protocol extension. If the chunk memory layout
    type is defined by a protocol extension, then the value must be an
    object with the keys `extension_spec` and `type`. The
    `extension_spec` key is required and the value must be a URI that
    identifies the protocol extension and dereferences to a
    human-readable representation of the specification.  The `type`
    key is required and the value is defined by the protocol
    extension. The object may also contain other keys as defined by
    the protocol extension.

`chunk_encoding_pipeline` (required)

    TODO

`fill_value` (required)

    TODO

`extensions` (optional)

    TODO


Group metadata
--------------

TODO define the structure and content of group metadata documents


User attributes
---------------

TODO define attributes documents


Store interface
---------------

TODO define the store interface


Storage protocol
----------------

TODO define how high level operations like creating a group or array 
translate into low level key/value operations on the store interface

Protocol extensions
-------------------

TODO define different types of protocol extension.
